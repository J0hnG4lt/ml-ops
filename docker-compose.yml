version: "3.2"

services:
    nginx:
        container_name: nginx
        build: ./src/nginx
        restart: always
        depends_on: 
            - python-model-service1
            - python-model-service2
        ports:
        - "80:80"
        - "443:443"
    #     volumes: 
    #         - ./src/nginx.conf:/etc/ngimnx/nginx.conf
    
    python-model-service1:
        restart: always
        container_name: python-service-1
        build:
            context: ./src/python-model-service-1
            dockerfile: dockerfile
        ports:
            - "8000:8000"
        # volumes:
        #     - ./src/python-model-service-1:/python-model-service-1
    
    python-model-service2:
        restart: always
        container_name: python-service-2
        build: 
            context: ./src/python-model-service-2
            dockerfile: dockerfile
        ports:
            - "8001:8001"
    #     # volumes:
    #     #     - ./src/python-model-service-2:/python-model-service-2
    postgres:
        container_name: postgres
        build: ./src/postgres
        restart: always
        env_file:
            - ./src/postgres/postgres.env
        ports:
            - 5432:5432
        # volumes:
            #     - ./volumes/postgres/data:/var/lib/postgresql/data

    rabbitmq-server:
        restart: always
        container_name: rabbitmq-server
        image: rabbitmq:3-management-alpine
        environment:
            RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
            RABBITMQ_DEFAULT_USER: "guest"
            RABBITMQ_DEFAULT_PASS: "guest"
            RABBITMQ_DEFAULT_VHOST: "/"
        ports:
            - "15672:15672"
            - "5672:5672"
        labels:
            NAME: "rabbitmq-server"
    
    mlflow:
        container_name: mlflow-server
        build: ./src/mlflow
        restart: always
        image: mlflow_server 
        ports: 
            - "5000:5000"
        command: 
            mlflow server --backend-store-uri postgresql://mlflow:metadata@postgres/mlflowdb --default-artifact-root s3://shiptmlflowbucket/mlflow --host 0.0.0.0 -p 5000
    
    influxdb:
        container_name: influxdb
        image: "influxdb:latest"
        restart: always
        ports:
            - 8086:8086
            - 8083:8083
            - 2003:2003
        env_file:
            - ./src/influxdb/influxdb.env
        # volumes:
        #     - ./volumes/influxdb/data:/var/lib/influxdb
        #     - ./src/influxdb/backups/influxdb/db:/var/lib/influxdb/backup

    chronograf:
        restart: always
        container_name: chronograf
        depends_on:
            - influxdb
        image: chronograf:1.8.4-alpine
        user: "0"
        ports:
            - 8888:8888
        env_file:
            - ./src/chronograf/chronograf.env
        # volumes:
        #     - ./volumes/chronograf/data:/var/lib/chronograf
        #     - ./volumes/chronograf/log:/var/log/chronograf

    grafana:
        container_name: grafana
        depends_on:
            - influxdb
        image: grafana/grafana:6.3.6
        restart: always
        user: "0"
        ports:
            - 3000:3000
        env_file:
            - ./src/grafana/grafana.env
        # volumes:
        #     - ./volumes/grafana/data:/var/lib/grafana
        #     - ./volumes/grafana/log:/var/log/grafana
    
    # telegraf:
    #     container_name: telegraf
    #     restart: always
    #     build: ./src/telegraf
    #     ports: 
    #         - "8086:8086"
    #     depends_on: 
    #         - influxdb

    webserver:
        restart: always
        container_name: airflow-webserver
        image: puckel/docker-airflow:1.10.9
        depends_on:
            - postgres
            - redis
        environment:
            - LOAD_EX=n
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=redispass
        volumes:
            - ./src/airflow/dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./plugins:/usr/local/airflow/plugins
        ports:
            - "8080:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3

    flower:
        container_name: airflow-flower
        image: puckel/docker-airflow:1.10.9
        restart: always
        depends_on:
            - redis
        environment:
            - EXECUTOR=Celery
            - REDIS_PASSWORD=redispass
        ports:
            - "5555:5555"
        command: flower

    scheduler:
        container_name: airlfow-scheduler
        image: puckel/docker-airflow:1.10.9
        restart: always
        depends_on:
            - webserver
        # volumes:
        #     - ./src/airflow/dags:/usr/local/airflow/dags
        # Uncomment to include custom plugins
        # - ./plugins:/usr/local/airflow/plugins
        environment:
            - LOAD_EX=n
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=redispass
        command: scheduler

    worker:
        container_name: airflow-worker
        image: puckel/docker-airflow:1.10.9
        restart: always
        depends_on:
            - scheduler
        # volumes:
        #     - ./src/airflow/dags:/usr/local/airflow/dags
            # Uncomment to include custom plugins
            # - ./plugins:/usr/local/airflow/plugins
        environment:
            - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
            - EXECUTOR=Celery
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
            - REDIS_PASSWORD=redispass
        command: worker

    redis:
        container_name: redis
        image: redis
        command: redis-server --requirepass redispass

    portainer:
        container_name: portainer
        image: portainer/portainer
        restart: always
        ports:
            - "9000:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
    #     #     - ./volumes/portainer/data:/data
        